// Generated by dia2code
#ifndef ENGINE__ENGINE__H
#define ENGINE__ENGINE__H

#include <json/json.h>
#include <mutex>
#include <vector>
#include <stack>

namespace state {
  class State;
};
namespace engine {
  class Command;
  class Action;
};
namespace ai {
  class AI;
}

#include "ai/AI.h"
#include "Command.h"

namespace engine {

  /// class Engine - 
  class Engine {
    // Associations
    // Attributes
  public:
    Json::Value record;
  private:
    state::State& currentState;
    std::mutex engine_mutex;
  protected:
    std::vector<Command*> currentCommands;
    bool run_randomAI     = true;
    // Operations
  public:
    Engine ();
    Engine (state::State& state);
    ~Engine ();
    state::State& getState () const;
    virtual void addCommand (Command* cmd);
    void resize (int c);
    std::stack<Action*> update ();
    void executeCom (Command* c);
    void undo (std::stack<Action*>& actions);
    std::stack<Action*> updateReplay ();
    virtual void runThread (ai::AI* random);
    // Setters and Getters
    const std::vector<Command*>& getCurrentCommands() const;
    void setCurrentCommands(const std::vector<Command*>& currentCommands);
    bool getRun_randomAI() const;
    void setRun_randomAI(bool run_randomAI);
  };

};

#endif
