// Generated by dia2code
#ifndef ENGINE__ENGINECLIENT__H
#define ENGINE__ENGINECLIENT__H

#include <json/json.h>
#include <mutex>
#include <vector>
#include <string>
#include <stack>

namespace state {
  class State;
};
namespace engine {
  class Command;
  class Action;
};
namespace ai {
  class AI;
}

#include "state/State.h"
#include "ai/AI.h"
#include "Command.h"

namespace engine {

  /// class EngineClient - 
  class EngineClient {
    // Associations
    // Attributes
  public:
    Json::Value record;
  private:
    state::State currentState;
  protected:
    std::mutex engine_mutex;
    std::vector<Command*> currentCommands;
    bool run_randomAI     = true;
    std::string url;
    int port;
    // Operations
  public:
    EngineClient (std::string url, int port);
    state::State& getState ();
    void addCommand (Command* cmd);
    void resize (int c);
    std::stack<Action*> update ();
    void executeCom (Command* c);
    void undo (std::stack<Action*>& actions);
    std::stack<Action*> updateReplay ();
    void runThread (ai::AI* random);
    // Setters and Getters
    const std::mutex& getEngine_mutex() const;
    void setEngine_mutex(const std::mutex& engine_mutex);
    const std::vector<Command*>& getCurrentCommands() const;
    void setCurrentCommands(const std::vector<Command*>& currentCommands);
    bool getRun_randomAI() const;
    void setRun_randomAI(bool run_randomAI);
    const std::string& getUrl() const;
    void setUrl(const std::string& url);
    int getPort() const;
    void setPort(int port);
  };

};

#endif
